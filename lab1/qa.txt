
1. В чем состоят основы технологии OpenMP? 

OpenMP (Open Multi-Processing) - это технология параллельного программирования для систем с общей памятью. Основные принципы:

    Использует модель "fork-join" для параллелизма
    Основана на директивах компилятора
    Поддерживает инкрементальное распараллеливание
    Обеспечивает переносимость между различными платформами


  2. В чем состоят основные преимущества и недостатки технологии OpenMP? 

Преимущества:

    Простота использования
    Возможность постепенного распараллеливания
    Хорошая масштабируемость
    Переносимость кода

Недостатки:

    Ограничена системами с общей памятью
    Возможны проблемы с синхронизацией и гонками данных
    Не всегда оптимальна для сложных алгоритмов


3. Что понимается под параллельной программой в рамках технологии OpenMP? 

Это программа, которая использует директивы OpenMP для создания параллельных секций. Она может выполняться на многоядерных процессорах или многопроцессорных системах, разделяя работу между несколькими потоками.


4. Какие проблемы возникают при использовании общих данных в параллельно выполняемых потоках? 

    Гонки данных (data races)
    Проблемы синхронизации
    Ложное разделение (false sharing)
    Необходимость обеспечения атомарности операций

5. Какой формат записи директив OpenMP? 

В C/C++: #pragma omp <директива> [клаузы]


6. В чем состоит назначение директивы parallel? 

Создает параллельную область, где код выполняется несколькими потоками.


7. В чем состоят понятия фрагмента, области и секции параллельной программы? 

    Фрагмент: часть кода, выполняемая параллельно
    Область: код, ограниченный директивами parallel
    Секция: независимая часть кода внутри параллельной области


8. Как осуществляется распараллеливание циклов в OpenMP? Какие условия должны выполняться, чтобы циклы могли быть распараллелены? 

Используется директива #pragma omp for. Условия:

    Известное число итераций
    Отсутствие зависимостей между итерациями


9. Какие возможности имеются в OpenMP для управления распределением итераций циклов между потоками? 

    schedule(static): равномерное распределение
    schedule(dynamic): динамическое распределение
    schedule(guided): адаптивное распределение
    schedule(auto): автоматический выбор


10. Как определяется порядок выполнения итераций в распараллеливаемых циклах?

По умолчанию порядок не гарантируется. Можно использовать ordered для последовательного выполнения.